// ai/autoDocAgent.js

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';
import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';

dotenv.config();

const API_KEY = process.env.GOOGLE_API_KEY;
const MODEL_NAME = 'gemini-2.5-pro'; // ‚úÖ Valid and supported model

if (!API_KEY) {
  console.error('‚ùå GOOGLE_API_KEY is missing in your .env file');
  process.exit(1);
}

const genAI = new GoogleGenerativeAI(API_KEY);

async function runDocumentationAgent() {
  try {
    console.log('üöÄ Running AI doc generation agent...');

    const gitDiff = execSync('git diff HEAD~1 HEAD', { encoding: 'utf-8' }).trim();

    if (!gitDiff) {
      console.log('‚úÖ No new changes detected. Skipping doc generation.');
      return;
    }

    console.log('üîç Git diff found:\n', gitDiff);

    const prompt = `
You are an AI documentation assistant. Based on the following git diff, generate updated technical documentation in Markdown format:

${gitDiff}

- Be clear and concise.
- Update endpoint explanations, function behavior, and config changes if present.
- Skip boilerplate code changes.
- Only return valid Markdown content.
    `;

    console.log('ü§ñ Sending prompt to Gemini AI...');

    const model = genAI.getGenerativeModel({
      model: MODEL_NAME,
      apiVersion: 'v1beta',
    });

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const markdown = response.text();

    const outputPath = path.resolve('docs', 'UPDATED_DOCUMENTATION.md');

    fs.mkdirSync(path.dirname(outputPath), { recursive: true });
    fs.writeFileSync(outputPath, markdown, 'utf-8');

    console.log(`‚úÖ Documentation updated at: ${outputPath}`);
     // === Git Commit and Push ===
    const commitMessage = 'docs: update autogenerated documentation';

    try {
      console.log('üì¶ Committing and pushing to GitHub...');
      
      execSync('git add docs/UPDATED_DOCUMENTATION.md', { stdio: 'inherit' });
      execSync(`git commit -m "${commitMessage}"`, { stdio: 'inherit' });
      execSync('git push', { stdio: 'inherit' });

      console.log('üöÄ Changes pushed to GitHub.');
    } catch (gitError) {
      console.error('‚ùå Git commit/push failed:', gitError.message);
    }
  } catch (error) {
    console.error('‚ùå Error running documentation agent:', error);
  }
}

runDocumentationAgent();
